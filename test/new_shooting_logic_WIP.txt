Shot find_next_shot(uint8_t* enemyboard){

    uint8_t longest_ship = find_longest_available_ship(enemyboard);
    #ifdef DEBUG_HTERM
    LOG("longest ship: %d\n", longest_ship);
    #endif

    uint8_t prefer_random = 0;
    uint8_t c = 0;
    uint8_t r = 0;
    uint8_t cl = 0;
    uint8_t rl = 0;

    for (int col = 0; col < 10; col++) {
        for (int row = 0; row < 10; row++) {
            prefer_random = 0;
            uint8_t shipl_x = 1;
            uint8_t shipl_y = 1;

            if (enemyboard[row * 10 + col] == 2) {
                // Check if there is a hit beside another hit, assume ship facing that way
                if (col + 1 < 10 && enemyboard[row * 10 + col + 1] == 2) {
                    prefer_random = 1;
                    shipl_x = 1;
                    c = col;
                    cl = col;
                    while (c + 1 < 10 && enemyboard[r * 10 + c + 1] == 2) { c++; shipl_x++; }
                    while (cl - 1 >= 0 && enemyboard[r * 10 + cl - 1] == 2) { cl--; shipl_x++; }

                    if (c + 1 < 10 && enemyboard[r * 10 + c + 1] == 0 && shipl_x < longest_ship) {
                        return (Shot){r, c + 1};
                    }

                }
                if (col - 1 >= 0 && enemyboard[row * 10 + col - 1] == 2) {
                    prefer_random = 1;
                    shipl_x = 1;
                    c = col;
                    cl = col;
                    while (c - 1 >= 0 && enemyboard[r * 10 + c - 1] == 2) { c--; shipl_x++; }
                    while (cl + 1 < 10 && enemyboard[r * 10 + cl + 1] == 2) { cl++; shipl_x++; }

                    if (c - 1 >= 0 && enemyboard[r * 10 + c - 1] == 0 && shipl_x < longest_ship) {
                        return (Shot){r, c - 1};
                    }

                }
                if (row + 1 < 10 && enemyboard[(row + 1) * 10 + col] == 2) {
                    prefer_random = 1;
                    shipl_y = 1;
                    r = row;
                    rl = row;
                    while (r + 1 < 10 && enemyboard[(r + 1) * 10 + c] == 2) { r++; shipl_y++; }
                    while (rl - 1 >= 0 && enemyboard[(rl - 1) * 10 + c] == 2) { rl--; shipl_y++; }

                    if (r + 1 < 10 && enemyboard[(r + 1) * 10 + c] == 0 && shipl_y < longest_ship) {
                        return (Shot){r + 1, c};
                    }
                }
                if (row - 1 >= 0 && enemyboard[(row - 1) * 10 + col] == 2) {
                    prefer_random = 1;
                    shipl_y = 1;
                    r = row;
                    rl = row;
                    while (r - 1 >= 0 && enemyboard[(r - 1) * 10 + c] == 2) { r--; shipl_y++; }
                    while (rl + 1 < 10 && enemyboard[(rl + 1) * 10 + c] == 2) { rl++; shipl_y++; }
                    if (r - 1 >= 0 && enemyboard[(r - 1) * 10 + c] == 0 && shipl_y < longest_ship) {
                        return (Shot){r - 1, c};
                    }
                }

                // Check to the right, left, down, and up if there is a hit
                if (prefer_random == 0) {
                    if (col + 1 < 10 && enemyboard[row * 10 + col + 1] == 0) {
                        return (Shot){row, col + 1};
                    } else if (col - 1 >= 0 && enemyboard[row * 10 + col - 1] == 0) {
                        return (Shot){row, col - 1};
                    } else if (row + 1 < 10 && enemyboard[(row + 1) * 10 + col] == 0) {
                        return (Shot){row + 1, col};
                    } else if (row - 1 >= 0 && enemyboard[(row - 1) * 10 + col] == 0) {
                        return (Shot){row - 1, col};
                    }
                }
            }
        }
    }

    //------------------If no hit was found, shoot with weighted randomness-------------------//

    //------calculate the total weight of the enemy board through checksum
    uint8_t chosen_col = 0;
    for (int i = 0; i < 10; i++){
        if (shoot_weights[i] > shoot_weights[chosen_col]){
            chosen_col = i;
        }
    }

    uint16_t tries = 0;
    while(tries < 500){
        uint8_t randrow = rand() % 10;
        if (enemyboard[randrow*10 + chosen_col] == 0){
            
            if(are_adjacent_hits(enemyboard, randrow, chosen_col) == 1){ //--------------if there have been hits in adjacent columns, shoot with 1/10 chance
                if (rand() % 30 == 0){
                    return (Shot){randrow, chosen_col};
                }
            }else{                                                       //--------------if there have not been hits in adjacent columns, shoot there
                return (Shot){randrow, chosen_col};
            }
        }
    }
    return find_next_shot_dumb(enemyboard);                              //--------------if no valid shot was found in 500 tries, shoot next in line
}